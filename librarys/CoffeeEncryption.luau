-- Hex68 Encoding/Decoding Library
local Hex68 = {}
local method = "Hex68"
-- Base64 characters
local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

-- Base64 Encoding Function
local function toBase64(data)
    return ((data:gsub('.', function(x)
        local r, b = '', x:byte()
        for i = 8, 1, -1 do r = r .. (b % 2^i - b % 2^(i-1) > 0 and '1' or '0') end
        return r
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c = 0
        for i = 1, 6 do c = c + (x:sub(i, i) == '1' and 2^(6-i) or 0) end
        return b:sub(c + 1, c + 1)
    end)..({ '', '==', '=' })[#data % 3 + 1])
end

-- Base64 Decoding Function
local function fromBase64(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r, f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do r = r .. (f % 2^i - f % 2^(i-1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        local c = 0
        for i = 1, 8 do c = c + (x:sub(i, i) == '1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

-- Hex68 Encoding Function
function Hex68.encode(str)
    local hex = (str:gsub('.', function(c)
        return string.format('%02X', string.byte(c))
    end))
    return toBase64(hex)
end

-- Hex68 Decoding Function
function Hex68.decode(str)
    local hex = fromBase64(str)
    return (hex:gsub('..', function(cc)
        return string.char(tonumber(cc, 16))
    end))
end

return Hex68
